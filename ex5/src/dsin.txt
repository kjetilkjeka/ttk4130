#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(110,32)
springDamper.stateSelect
springDamper.s_nominal
springDamper.s_rel
springDamper.der(s_rel)
springDamper.v_rel
springDamper.der(v_rel)
springDamper.f
springDamper.der(f)
springDamper.flange_a.s
springDamper.flange_a.der(s)
springDamper.c
springDamper.d
springDamper.s_rel0
springDamper.useHeatPort
springDamper.lossPower
springDamper.f_c
springDamper.der(f_c)
springDamper.f_d
springDamper.der(f_d)
springDamper1.stateSelect
springDamper1.s_nominal
springDamper1.s_rel
springDamper1.der(s_rel)
springDamper1.v_rel
springDamper1.der(v_rel)
springDamper1.flange_b.s
springDamper1.flange_b.der(s)
springDamper1.c
springDamper1.d
springDamper1.s_rel0
springDamper1.useHeatPort
springDamper1.lossPower
springDamper1.f_c
springDamper1.der(f_c)
springDamper1.f_d
springDamper1.der(f_d)
drive.inertia.flange_b.tau
drive.inertia.flange_b.der(tau)
drive.inertia.J
drive.inertia.stateSelect
drive.inertia.phi
drive.inertia.der(phi)
drive.inertia.w
drive.inertia.der(w)
drive.damper.phi_rel
drive.damper.der(phi_rel)
drive.damper.w_rel
drive.damper.der(w_rel)
drive.damper.flange_b.phi
drive.damper.flange_b.der(phi)
drive.damper.phi_nominal
drive.damper.stateSelect
drive.damper.d
drive.damper.useHeatPort
drive.damper.lossPower
drive.torque.useSupport
drive.torque.phi_support
drive.idealGearR2T.useSupportR
drive.idealGearR2T.useSupportT
drive.idealGearR2T.fixedR.phi0
drive.idealGearR2T.fixedT.s0
drive.idealGearR2T.ratio
drive1.u
drive1.inertia.flange_b.tau
drive1.inertia.flange_b.der(tau)
drive1.inertia.J
drive1.inertia.stateSelect
drive1.inertia.phi
drive1.inertia.der(phi)
drive1.inertia.w
drive1.inertia.der(w)
drive1.damper.phi_rel
drive1.damper.der(phi_rel)
drive1.damper.w_rel
drive1.damper.der(w_rel)
drive1.damper.flange_b.phi
drive1.damper.flange_b.der(phi)
drive1.damper.phi_nominal
drive1.damper.stateSelect
drive1.damper.d
drive1.damper.useHeatPort
drive1.damper.lossPower
drive1.torque.useSupport
drive1.torque.phi_support
drive1.idealGearR2T.useSupportR
drive1.idealGearR2T.useSupportT
drive1.idealGearR2T.fixedR.phi0
drive1.idealGearR2T.fixedT.s0
drive1.idealGearR2T.ratio
pulley.flange_a.s
pulley.flange_a.der(s)
pulley.flange_b.s
pulley.flange_b.der(s)
pulley.xk
pulley.der(xk)
pulley.Fk
pulley.der(Fk)
pulley.k
pulley.theta
T1
T2
y
gain.k
stateSelect.set1.x[1]
stateSelect.set1.der(x[1])
stateSelect.set1.P[1, 1]
stateSelect.set1.P[1, 2]
stateSelect.set1.P[1, 3]
stateSelect.set1.P[1, 4]
stateSelect.set1.P[1, 5]

double initialValue(110,6)
  0       4                  1       5                  6   770   # springDamper.stateSelect
  0  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # springDamper.s_nominal
 -1       0                  0       0                  2   272   # springDamper.s_rel
  0       0                  0       0                  3   256   # springDamper.der(s_rel)
  0       0                  0       0                  6   264   # springDamper.v_rel
  0       0                  0       0                  6   256   # springDamper.der(v_rel)
  0       0                  0       0                  6   256   # springDamper.f
  0       0                  0       0                  6   256   # springDamper.der(f)
  0       0                  0       0                  6   260   # springDamper.flange_a.s
  0       0                  0       0                  6   260   # springDamper.flange_a.der(s)
 -1      50                  0 1.0000000000000000E+100  1   280   # springDamper.c
 -1  5.0000000000000000E-01  0 1.0000000000000000E+100  1   280   # springDamper.d
 -1       0                  0       0                  1   280   # springDamper.s_rel0
  0       0                  0       0                  6   769   # springDamper.useHeatPort
  0       0                  0       0                  6   256   # springDamper.lossPower
  0       0                  0       0                  6  1280   # springDamper.f_c
  0       0                  0       0                  6  1280   # springDamper.der(f_c)
  0       0                  0       0                  6  1280   # springDamper.f_d
  0       0                  0       0                  6  1280   # springDamper.der(f_d)
  0       4                  1       5                  6   770   # springDamper1.stateSelect
  0  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # springDamper1.s_nominal
 -1       0                  0       0                  2   272   # springDamper1.s_rel
  0       0                  0       0                  3   256   # springDamper1.der(s_rel)
  0       0                  0       0                  6   264   # springDamper1.v_rel
  0       0                  0       0                  6   256   # springDamper1.der(v_rel)
  0       0                  0       0                  6   260   # springDamper1.flange_b.s
  0       0                  0       0                  6   260   # springDamper1.flange_b.der(s)
 -1      50                  0 1.0000000000000000E+100  1   280   # springDamper1.c
 -1  5.0000000000000000E-01  0 1.0000000000000000E+100  1   280   # springDamper1.d
 -1       0                  0       0                  1   280   # springDamper1.s_rel0
  0       0                  0       0                  6   769   # springDamper1.useHeatPort
  0       0                  0       0                  6   256   # springDamper1.lossPower
  0       0                  0       0                  6  1280   # springDamper1.f_c
  0       0                  0       0                  6  1280   # springDamper1.der(f_c)
  0       0                  0       0                  6  1280   # springDamper1.f_d
  0       0                  0       0                  6  1280   # springDamper1.der(f_d)
  0       0                  0       0                  6   388   # drive.inertia.flange_b.tau
  0       0                  0       0                  6   260   # drive.inertia.flange_b.der(tau)
 -1  1.0000000000000000E-03  0 1.0000000000000000E+100  1   280   # drive.inertia.J
  0       3                  1       5                  6   770   # drive.inertia.stateSelect
 -1       0                  0       0                  2   280   # drive.inertia.phi
  0       0                  0       0                  3   256   # drive.inertia.der(phi)
 -1       0                  0       0                  2   280   # drive.inertia.w
  0       0                  0       0                  3   256   # drive.inertia.der(w)
 -1       0                  0       0                  2   280   # drive.damper.phi_rel
  0       0                  0       0                  3   256   # drive.damper.der(phi_rel)
  0       0                  0       0                  6   256   # drive.damper.w_rel
  0       0                  0       0                  6   256   # drive.damper.der(w_rel)
  0       0                  0       0                  6   260   # drive.damper.flange_b.phi
  0       0                  0       0                  6   260   # drive.damper.flange_b.der(phi)
  0  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # drive.damper.phi_nominal
  0       4                  1       5                  6   770   # drive.damper.stateSelect
 -1  1.0000000000000001E-01  0 1.0000000000000000E+100  1   280   # drive.damper.d
  0       0                  0       0                  6   769   # drive.damper.useHeatPort
  0       0                  0       0                  6   256   # drive.damper.lossPower
  0       0                  0       0                  6   769   # drive.torque.useSupport
  0       0                  0       0                  6  1280   # drive.torque.phi_support
  0       0                  0       0                  6   769   # drive.idealGearR2T.useSupportR
  0       0                  0       0                  6   769   # drive.idealGearR2T.useSupportT
 -1       0                  0       0                  1  1304   # drive.idealGearR2T.fixedR.phi0
 -1       0                  0       0                  1  1304   # drive.idealGearR2T.fixedT.s0
 -1      10                  0       0                  1   280   # drive.idealGearR2T.ratio
  0       0                  0       0                  6   256   # drive1.u
  0       0                  0       0                  6   388   # drive1.inertia.flange_b.tau
  0       0                  0       0                  6   260   # drive1.inertia.flange_b.der(tau)
 -1  1.0000000000000000E-03  0 1.0000000000000000E+100  1   280   # drive1.inertia.J
  0       3                  1       5                  6   770   # drive1.inertia.stateSelect
 -1       0                  0       0                  2   280   # drive1.inertia.phi
  0       0                  0       0                  3   256   # drive1.inertia.der(phi)
 -1       0                  0       0                  2   280   # drive1.inertia.w
  0       0                  0       0                  3   256   # drive1.inertia.der(w)
 -1       0                  0       0                  2   280   # drive1.damper.phi_rel
  0       0                  0       0                  3   256   # drive1.damper.der(phi_rel)
  0       0                  0       0                  6   264   # drive1.damper.w_rel
  0       0                  0       0                  6   256   # drive1.damper.der(w_rel)
  0       0                  0       0                  6   260   # drive1.damper.flange_b.phi
  0       0                  0       0                  6   260   # drive1.damper.flange_b.der(phi)
  0  1.0000000000000000E-04  0 1.0000000000000000E+100  6   256   # drive1.damper.phi_nominal
  0       4                  1       5                  6   770   # drive1.damper.stateSelect
 -1  1.0000000000000001E-01  0 1.0000000000000000E+100  1   280   # drive1.damper.d
  0       0                  0       0                  6   769   # drive1.damper.useHeatPort
  0       0                  0       0                  6   256   # drive1.damper.lossPower
  0       0                  0       0                  6   769   # drive1.torque.useSupport
  0       0                  0       0                  6  1280   # drive1.torque.phi_support
  0       0                  0       0                  6   769   # drive1.idealGearR2T.useSupportR
  0       0                  0       0                  6   769   # drive1.idealGearR2T.useSupportT
 -1       0                  0       0                  1  1304   # drive1.idealGearR2T.fixedR.phi0
 -1       0                  0       0                  1  1304   # drive1.idealGearR2T.fixedT.s0
 -1      10                  0       0                  1   280   # drive1.idealGearR2T.ratio
  0       0                  0       0                  6   260   # pulley.flange_a.s
  0       0                  0       0                  6   260   # pulley.flange_a.der(s)
  0       0                  0       0                  6   260   # pulley.flange_b.s
  0       0                  0       0                  6   260   # pulley.flange_b.der(s)
  0       0                  0       0                  6   256   # pulley.xk
  0       0                  0       0                  6   256   # pulley.der(xk)
  0       0                  0       0                  6   256   # pulley.Fk
  0       0                  0       0                  6   256   # pulley.der(Fk)
 -1     200                  0       0                  1   280   # pulley.k
 -1  7.8539800000000004E-01  0       0                  1   280   # pulley.theta
 -1       0                  0       0                  5   256   # T1
 -1       0                  0       0                  5   256   # T2
  0       0                  0       0                  4   256   # y
 -1      -1                  0       0                  1   280   # gain.k
 -1       0                  0       0                  2   272   # stateSelect.set1.x[1]
  0       0                  0       0                  3   256   # stateSelect.set1.der(x[1])
  0       0                  0       0                  6   256   # stateSelect.set1.P[1, 1]
  0       0                  0       0                  6   256   # stateSelect.set1.P[1, 2]
  0       0                  0       0                  6   256   # stateSelect.set1.P[1, 3]
  0       0                  0       0                  6   256   # stateSelect.set1.P[1, 4]
  0       0                  0       0                  6   256   # stateSelect.set1.P[1, 5]


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(110,97)
Priority to use phi_rel and w_rel as states [:#(type=StateSelect)]
Nominal value of s_rel (used for scaling) [m]
Relative distance (= flange_b.s - flange_a.s) [m]
der(Relative distance (= flange_b.s - flange_a.s)) [m/s]
Relative velocity (= der(s_rel)) [m/s]
der(Relative velocity (= der(s_rel))) [m/s2]
Forces between flanges (= flange_b.f) [N]
der(Forces between flanges (= flange_b.f)) [N/s]
Absolute position of flange [m]
der(Absolute position of flange) [m/s]
Spring constant [N/m]
Damping constant [N.s/m]
Unstretched spring length [m]
=true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
Spring force [N]
der(Spring force) [N/s]
Damping force [N]
der(Damping force) [N/s]
Priority to use phi_rel and w_rel as states [:#(type=StateSelect)]
Nominal value of s_rel (used for scaling) [m]
Relative distance (= flange_b.s - flange_a.s) [m]
der(Relative distance (= flange_b.s - flange_a.s)) [m/s]
Relative velocity (= der(s_rel)) [m/s]
der(Relative velocity (= der(s_rel))) [m/s2]
Absolute position of flange [m]
der(Absolute position of flange) [m/s]
Spring constant [N/m]
Damping constant [N.s/m]
Unstretched spring length [m]
=true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
Spring force [N]
der(Spring force) [N/s]
Damping force [N]
der(Damping force) [N/s]
Cut torque in the flange [N.m]
der(Cut torque in the flange) [W]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Relative rotation angle (= flange_b.phi - flange_a.phi) [rad|deg]
der(Relative rotation angle (= flange_b.phi - flange_a.phi)) [rad/s]
Relative angular velocity (= der(phi_rel)) [rad/s]
der(Relative angular velocity (= der(phi_rel))) [rad/s2]
Absolute rotation angle of flange [rad|deg]
der(Absolute rotation angle of flange) [rad/s]
Nominal value of phi_rel (used for scaling) [rad|rad]
Priority to use phi_rel and w_rel as states [:#(type=StateSelect)]
Damping constant [N.m.s/rad]
=true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
= true, if rotational support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
= true, if translational support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Fixed offset angle of housing [rad|deg]
Fixed offset position of housing [m]
Transmission ratio (flange_a.phi/flange_b.s) [rad/m]
[N.m]
Cut torque in the flange [N.m]
der(Cut torque in the flange) [W]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Relative rotation angle (= flange_b.phi - flange_a.phi) [rad|deg]
der(Relative rotation angle (= flange_b.phi - flange_a.phi)) [rad/s]
Relative angular velocity (= der(phi_rel)) [rad/s]
der(Relative angular velocity (= der(phi_rel))) [rad/s2]
Absolute rotation angle of flange [rad|deg]
der(Absolute rotation angle of flange) [rad/s]
Nominal value of phi_rel (used for scaling) [rad|rad]
Priority to use phi_rel and w_rel as states [:#(type=StateSelect)]
Damping constant [N.m.s/rad]
=true, if heatPort is enabled [:#(type=Boolean)]
Loss power leaving component via heatPort (> 0, if heat is flowing out of component) [W]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Absolute angle of support flange [rad|deg]
= true, if rotational support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
= true, if translational support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Fixed offset angle of housing [rad|deg]
Fixed offset position of housing [m]
Transmission ratio (flange_a.phi/flange_b.s) [rad/m]
Absolute position of flange [m]
der(Absolute position of flange) [m/s]
Absolute position of flange [m]
der(Absolute position of flange) [m/s]
Spring deflection/vertical position pulley [m]
der(Spring deflection/vertical position pulley) [m/s]
Spring force [N]
der(Spring force) [N/s]
Spring constant [kg/s2]
Angle
[:#(prefix=input)]
[:#(prefix=input)]
[m]
Gain value multiplied with input signal [1]








